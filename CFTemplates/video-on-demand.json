{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Deploys API layer of the solutions along with the database tables.",
    "Mappings": {
        "Send": {
            "AnonymousUsage": {
                "Data": "Yes"
            }
        }
    },
    "Parameters": {
        "lambdaFunctionsS3Bucket": {
            "Description": "Bucket Name in which lambda functions are stored.",
            "Type": "String",
            "Default": "vod-lambda-functions"
        },
        "resourcesRegion": {
            "Description": "Region in which the resources are launched. (eg:us-east-1)",
            "Type": "String"
        }
    },
    "Resources": {
        "usersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "email",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "email",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                }
            }
        },
        "usersTableWriteCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 15,
                "MinCapacity": 5,
                "ResourceId": {
                    "Fn::Join": [
                        "/",
                        [
                            "table",
                            {
                                "Ref": "usersTable"
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "usersTableScalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
                "ServiceNamespace": "dynamodb"
            }
        },
        "usersTableScalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "application-autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:DescribeTable",
                                        "dynamodb:UpdateTable",
                                        "cloudwatch:PutMetricAlarm",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:SetAlarmState",
                                        "cloudwatch:DeleteAlarms"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "usersTableWriteScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "WriteAutoScalingPolicy",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "usersTableWriteCapacityScalableTarget"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 50,
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
                    }
                }
            }
        },
        "shortVideosTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "createdAt",
                        "AttributeType": "N"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                    }
                ],
                "GlobalSecondaryIndexes": [
                    {
                        "IndexName": "id-created-at-index",
                        "KeySchema": [
                            {
                                "AttributeName": "id",
                                "KeyType": "HASH"
                            },
                            {
                                "AttributeName": "createdAt",
                                "KeyType": "RANGE"
                            }
                        ],
                        "Projection": {
                            "ProjectionType": "ALL"
                        },
                        "ProvisionedThroughput": {
                            "ReadCapacityUnits": 5,
                            "WriteCapacityUnits": 5
                        }
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                }
            }
        },
        "shortVideosTableWriteCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 15,
                "MinCapacity": 5,
                "ResourceId": {
                    "Fn::Join": [
                        "/",
                        [
                            "table",
                            {
                                "Ref": "shortVideosTable"
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "shortVideosTableScalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
                "ServiceNamespace": "dynamodb"
            }
        },
        "shortVideosTableScalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "application-autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:DescribeTable",
                                        "dynamodb:UpdateTable",
                                        "cloudwatch:PutMetricAlarm",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:SetAlarmState",
                                        "cloudwatch:DeleteAlarms"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "shortVideosTableWriteScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "shortVideosWriteAutoScalingPolicy",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "shortVideosTableWriteCapacityScalableTarget"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 50,
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
                    }
                }
            }
        },
        "longVideosTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                }
            }
        },
        "longVideosTableWriteCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 15,
                "MinCapacity": 5,
                "ResourceId": {
                    "Fn::Join": [
                        "/",
                        [
                            "table",
                            {
                                "Ref": "longVideosTable"
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "longVideosTableScalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
                "ServiceNamespace": "dynamodb"
            }
        },
        "longVideosTableScalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "application-autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:DescribeTable",
                                        "dynamodb:UpdateTable",
                                        "cloudwatch:PutMetricAlarm",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:SetAlarmState",
                                        "cloudwatch:DeleteAlarms"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "longVideosTableWriteScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "longVideosWriteAutoScalingPolicy",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "longVideosTableWriteCapacityScalableTarget"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 50,
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
                    }
                }
            }
        },
        "shortVideoLikesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "user",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "videoId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "videoId",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "user",
                        "KeyType": "RANGE"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                }
            }
        },
        "shortVideoLikesTableWriteCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 15,
                "MinCapacity": 5,
                "ResourceId": {
                    "Fn::Join": [
                        "/",
                        [
                            "table",
                            {
                                "Ref": "shortVideoLikesTable"
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "shortVideoLikesTableScalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
                "ServiceNamespace": "dynamodb"
            }
        },
        "shortVideoLikesTableScalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "application-autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:DescribeTable",
                                        "dynamodb:UpdateTable",
                                        "cloudwatch:PutMetricAlarm",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:SetAlarmState",
                                        "cloudwatch:DeleteAlarms"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "shortVideoLikesTableWriteScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "shortVideoLikesWriteAutoScalingPolicy",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "shortVideoLikesTableWriteCapacityScalableTarget"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 50,
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
                    }
                }
            }
        },
        "genrewiseVideosTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "genre",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "videoId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "genre",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "videoId",
                        "KeyType": "RANGE"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                }
            }
        },
        "genrewiseVideosTableWriteCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 15,
                "MinCapacity": 5,
                "ResourceId": {
                    "Fn::Join": [
                        "/",
                        [
                            "table",
                            {
                                "Ref": "genrewiseVideosTable"
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "genrewiseVideosTableScalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
                "ServiceNamespace": "dynamodb"
            }
        },
        "genrewiseVideosTableScalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "application-autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:DescribeTable",
                                        "dynamodb:UpdateTable",
                                        "cloudwatch:PutMetricAlarm",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:SetAlarmState",
                                        "cloudwatch:DeleteAlarms"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "genrewiseVideosTableWriteScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "genrewiseVideosWriteAutoScalingPolicy",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "genrewiseVideosTableWriteCapacityScalableTarget"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 50,
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
                    }
                }
            }
        },
        "longVideosRatingsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "videoId",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "user",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "videoId",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "user",
                        "KeyType": "RANGE"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                }
            }
        },
        "longVideosRatingsTableWriteCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 15,
                "MinCapacity": 5,
                "ResourceId": {
                    "Fn::Join": [
                        "/",
                        [
                            "table",
                            {
                                "Ref": "longVideosRatingsTable"
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "longVideosRatingsTableScalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
                "ServiceNamespace": "dynamodb"
            }
        },
        "longVideosRatingsTableScalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "application-autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:DescribeTable",
                                        "dynamodb:UpdateTable",
                                        "cloudwatch:PutMetricAlarm",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:SetAlarmState",
                                        "cloudwatch:DeleteAlarms"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "longVideosRatingsTableWriteScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "longVideosRatingsWriteAutoScalingPolicy",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "longVideosRatingsTableWriteCapacityScalableTarget"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 50,
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
                    }
                }
            }
        },
        "languagewiseVideosTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "languageName",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "videoId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "languageName",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "videoId",
                        "KeyType": "RANGE"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                }
            }
        },
        "languagewiseVideosTableWriteCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 15,
                "MinCapacity": 5,
                "ResourceId": {
                    "Fn::Join": [
                        "/",
                        [
                            "table",
                            {
                                "Ref": "languagewiseVideosTable"
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "languagewiseVideosTableScalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
                "ServiceNamespace": "dynamodb"
            }
        },
        "languagewiseVideosTableScalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "application-autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:DescribeTable",
                                        "dynamodb:UpdateTable",
                                        "cloudwatch:PutMetricAlarm",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:SetAlarmState",
                                        "cloudwatch:DeleteAlarms"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "languagewiseVideosTableWriteScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "languagewiseVideosWriteAutoScalingPolicy",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "languagewiseVideosTableWriteCapacityScalableTarget"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 50,
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
                    }
                }
            }
        },
        "subscriptionTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "userId",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "userId",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                }
            }
        },
        "subscriptionTableWriteCapacityScalableTarget": {
            "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
            "Properties": {
                "MaxCapacity": 15,
                "MinCapacity": 5,
                "ResourceId": {
                    "Fn::Join": [
                        "/",
                        [
                            "table",
                            {
                                "Ref": "subscriptionTable"
                            }
                        ]
                    ]
                },
                "RoleARN": {
                    "Fn::GetAtt": [
                        "subscriptionTableScalingRole",
                        "Arn"
                    ]
                },
                "ScalableDimension": "dynamodb:table:WriteCapacityUnits",
                "ServiceNamespace": "dynamodb"
            }
        },
        "subscriptionTableScalingRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "application-autoscaling.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:DescribeTable",
                                        "dynamodb:UpdateTable",
                                        "cloudwatch:PutMetricAlarm",
                                        "cloudwatch:DescribeAlarms",
                                        "cloudwatch:GetMetricStatistics",
                                        "cloudwatch:SetAlarmState",
                                        "cloudwatch:DeleteAlarms"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "subscriptionTableWriteScalingPolicy": {
            "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
            "Properties": {
                "PolicyName": "subscriptionWriteAutoScalingPolicy",
                "PolicyType": "TargetTrackingScaling",
                "ScalingTargetId": {
                    "Ref": "subscriptionTableWriteCapacityScalableTarget"
                },
                "TargetTrackingScalingPolicyConfiguration": {
                    "TargetValue": 50,
                    "ScaleInCooldown": 60,
                    "ScaleOutCooldown": 60,
                    "PredefinedMetricSpecification": {
                        "PredefinedMetricType": "DynamoDBWriteCapacityUtilization"
                    }
                }
            }
        },
        "onCognitoUserCreateServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            }
        },
        "onCognitoUserCreateServiceRolePolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
                                "cognito-identity:LookupDeveloperIdentity",
                                "cognito-identity:MergeDeveloperIdentities",
                                "cognito-identity:UnlinkDeveloperIdentity"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "cognito-identity:*",
                                "cognito-idp:*",
                                "cognito-sync:*",
                                "iam:ListRoles",
                                "iam:ListOpenIdConnectProviders",
                                "iam:GetRole",
                                "iam:ListSAMLProviders",
                                "iam:GetSAMLProvider",
                                "kinesis:ListStreams",
                                "lambda:GetPolicy",
                                "lambda:ListFunctions",
                                "sns:GetSMSSandboxAccountStatus",
                                "sns:ListPlatformApplications",
                                "ses:ListIdentities",
                                "ses:GetIdentityVerificationAttributes",
                                "mobiletargeting:GetApps",
                                "acm:ListCertificates"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": "iam:CreateServiceLinkedRole",
                            "Resource": "*",
                            "Condition": {
                                "StringEquals": {
                                    "iam:AWSServiceName": [
                                        "cognito-idp.amazonaws.com",
                                        "email.cognito-idp.amazonaws.com"
                                    ]
                                }
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "usersTable",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "PolicyName": "onCognitoUserCreateServiceRolePolicy",
                "Roles": [
                    {
                        "Ref": "onCognitoUserCreateServiceRole"
                    }
                ]
            }
        },
        "onCognitoUserCreate": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "onCognitoUserCreate.zip"
                },
                "Handler": "index.handler",
                "Runtime": "nodejs12.x",
                "Timeout": 30,
                "Environment": {
                    "Variables": {
                        "DB_USERS_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "usersTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "REGION": {
                            "Ref": "resourcesRegion"
                        }
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "onCognitoUserCreateServiceRole",
                        "Arn"
                    ]
                },
                "Description": "Function executes on pre-signup hook of cognito"
            },
            "DependsOn": [
                "onCognitoUserCreateServiceRole",
                "onCognitoUserCreateServiceRolePolicy"
            ]
        },
        "onShortVideoUploadServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            }
        },
        "onShortVideoUploadServiceRoleDefaultPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "shortVideosTable",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "PolicyName": "onShortVideoUploadServiceRoleDefaultPolicy",
                "Roles": [
                    {
                        "Ref": "onShortVideoUploadServiceRole"
                    }
                ]
            }
        },
        "onShortVideoUpload": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "onShortVideoUpload.zip"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "onShortVideoUploadServiceRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 30,
                "Environment": {
                    "Variables": {
                        "DB_SHORT_VIDEOS_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "shortVideosTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "REGION": {
                            "Ref": "resourcesRegion"
                        }
                    }
                },
                "VpcConfig": {
                    "SecurityGroupIds": [],
                    "SubnetIds": []
                },
                "Description": "Function uploads the details of the uploaded video to database."
            },
            "DependsOn": [
                "onShortVideoUploadServiceRole",
                "onShortVideoUploadServiceRoleDefaultPolicy"
            ]
        },
        "onLongVideoUploadServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            }
        },
        "onLongVideoUploadServiceRoleDefaultPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "longVideosTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "genrewiseVideosTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "languagewiseVideosTable",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "PolicyName": "onLongVideoUploadServiceRoleDefaultPolicy",
                "Roles": [
                    {
                        "Ref": "onLongVideoUploadServiceRole"
                    }
                ]
            }
        },
        "onLongVideoUpload": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "onLongVideoUpload.zip"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "onLongVideoUploadServiceRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 30,
                "Environment": {
                    "Variables": {
                        "DB_LONG_VIDEOS_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "longVideosTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "DB_LANGUAGEWISE_VIDEOS_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "languagewiseVideosTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "DB_GENREWISE_VIDEOS_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "genrewiseVideosTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "REGION": {
                            "Ref": "resourcesRegion"
                        },
                        "OPENSEARCH_DOMAIN": "OPENSEARCH_DOMAIN"
                    }
                },
                "VpcConfig": {
                    "SecurityGroupIds": [],
                    "SubnetIds": []
                },
                "Description": "Function uploads the details of the uploaded video to database."
            },
            "DependsOn": [
                "onLongVideoUploadServiceRole",
                "onLongVideoUploadServiceRoleDefaultPolicy"
            ]
        },
        "getShortContentServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            }
        },
        "getShortContentServiceRoleDefaultPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "shortVideosTable",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "PolicyName": "getShortContentServiceRoleDefaultPolicy",
                "Roles": [
                    {
                        "Ref": "getShortContentServiceRole"
                    }
                ]
            }
        },
        "getShortContent": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "getShortContent.zip"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "getShortContentServiceRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 30,
                "Environment": {
                    "Variables": {
                        "DB_SHORT_VIDEOS_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "shortVideosTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "REGION": {
                            "Ref": "resourcesRegion"
                        }
                    }
                },
                "VpcConfig": {
                    "SecurityGroupIds": [],
                    "SubnetIds": []
                },
                "Description": "Function fetches short videos stored in db."
            },
            "DependsOn": [
                "getShortContentServiceRole",
                "getShortContentServiceRoleDefaultPolicy"
            ]
        },
        "getLongContentServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            }
        },
        "getLongContentServiceRoleDefaultPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "longVideosTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "genrewiseVideosTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "languagewiseVideosTable",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "PolicyName": "getLongContentServiceRoleDefaultPolicy",
                "Roles": [
                    {
                        "Ref": "getLongContentServiceRole"
                    }
                ]
            }
        },
        "getLongContent": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "getLongContent.zip"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "getLongContentServiceRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 30,
                "Environment": {
                    "Variables": {
                        "DB_LONG_VIDEOS_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "longVideosTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "DB_LANGUAGEWISE_VIDEOS_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "languagewiseVideosTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "DB_GENREWISE_VIDEOS_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "genrewiseVideosTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "REGION": {
                            "Ref": "resourcesRegion"
                        }
                    }
                },
                "VpcConfig": {
                    "SecurityGroupIds": [],
                    "SubnetIds": []
                },
                "Description": "Function fetches long videos stored in db."
            },
            "DependsOn": [
                "getLongContentServiceRole",
                "getLongContentServiceRoleDefaultPolicy"
            ]
        },
        "likeShortVideoServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            }
        },
        "likeShortVideoServiceRoleDefaultPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "shortVideoLikesTable",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "PolicyName": "likeShortVideoServiceRoleDefaultPolicy",
                "Roles": [
                    {
                        "Ref": "likeShortVideoServiceRole"
                    }
                ]
            }
        },
        "likeShortVideo": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "likeShortVideo.zip"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "likeShortVideoServiceRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 30,
                "Environment": {
                    "Variables": {
                        "DB_SHORT_VIDEO_LIKES_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "shortVideoLikesTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "REGION": {
                            "Ref": "resourcesRegion"
                        }
                    }
                },
                "VpcConfig": {
                    "SecurityGroupIds": [],
                    "SubnetIds": []
                },
                "Description": "Function fetches long videos stored in db."
            },
            "DependsOn": [
                "likeShortVideoServiceRole",
                "likeShortVideoServiceRoleDefaultPolicy"
            ]
        },
        "rateLongVideoServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            }
        },
        "rateLongVideoServiceRoleDefaultPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "longVideosRatingsTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "longVideosTable",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "PolicyName": "rateLongVideoServiceRoleDefaultPolicy",
                "Roles": [
                    {
                        "Ref": "rateLongVideoServiceRole"
                    }
                ]
            }
        },
        "rateLongVideo": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "rateLongVideo.zip"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "rateLongVideoServiceRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 30,
                "Environment": {
                    "Variables": {
                        "DB_LONG_VIDEO_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "longVideosTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "DB_VIDEO_RATING_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "longVideosRatingsTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "REGION": {
                            "Ref": "resourcesRegion"
                        }
                    }
                },
                "VpcConfig": {
                    "SecurityGroupIds": [],
                    "SubnetIds": []
                },
                "Description": "Function fetches long videos stored in db."
            },
            "DependsOn": [
                "rateLongVideoServiceRole",
                "rateLongVideoServiceRoleDefaultPolicy"
            ]
        },
        "queryDBServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            }
        },
        "queryDBServiceRoleDefaultPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "usersTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "shortVideosTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "longVideosRatingsTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "longVideosTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "shortVideoLikesTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "genrewiseVideosTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "longVideosRatingsTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "languagewiseVideosTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "subscriptionTable",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "PolicyName": "queryDBServiceRoleDefaultPolicy",
                "Roles": [
                    {
                        "Ref": "queryDBServiceRole"
                    }
                ]
            }
        },
        "queryDBFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "queryDB.zip"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "queryDBServiceRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 30,
                "Environment": {
                    "Variables": {
                        "REGION": {
                            "Ref": "resourcesRegion"
                        }
                    }
                },
                "VpcConfig": {
                    "SecurityGroupIds": [],
                    "SubnetIds": []
                },
                "Description": "Query DynamoDB Tables."
            },
            "DependsOn": [
                "queryDBServiceRole",
                "queryDBServiceRoleDefaultPolicy"
            ]
        },
        "opensearchIndexingServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            }
        },
        "opensearchIndexingServiceRoleDefaultPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "es:*"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "PolicyName": "opensearchIndexingServiceRoleDefaultPolicy",
                "Roles": [
                    {
                        "Ref": "opensearchIndexingServiceRole"
                    }
                ]
            }
        },
        "opensearchIndexing": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "opensearchIndexing.zip"
                },
                "Handler": "lambda_function.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "opensearchIndexingServiceRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.8",
                "Timeout": 30,
                "Environment": {
                    "Variables": {
                        "OPENSEARCH_DOMAIN": "OPENSEARCH_DOMAIN"
                    }
                },
                "VpcConfig": {
                    "SecurityGroupIds": [],
                    "SubnetIds": []
                },
                "Description": "Function indexes data to opensearch."
            },
            "DependsOn": [
                "opensearchIndexingServiceRole",
                "opensearchIndexingServiceRoleDefaultPolicy"
            ]
        },
        "opensearchFetchServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            }
        },
        "opensearchFetchServiceRoleDefaultPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "es:*"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "PolicyName": "opensearchFetchServiceRoleDefaultPolicy",
                "Roles": [
                    {
                        "Ref": "opensearchFetchServiceRole"
                    }
                ]
            }
        },
        "opensearchFetch": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "opensearchFetch.zip"
                },
                "Handler": "lambda_function.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "opensearchFetchServiceRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.8",
                "Timeout": 30,
                "Environment": {
                    "Variables": {
                        "OPENSEARCH_DOMAIN": "OPENSEARCH_DOMAIN"
                    }
                },
                "VpcConfig": {
                    "SecurityGroupIds": [],
                    "SubnetIds": []
                },
                "Description": "Function to fetch data from opensearch."
            },
            "DependsOn": [
                "opensearchFetchServiceRole",
                "opensearchFetchServiceRoleDefaultPolicy"
            ]
        },
        "premiumSubscriptionServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            }
        },
        "premiumSubscriptionServiceRoleDefaultPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "subscriptionTable",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "PolicyName": "premiumSubscriptionServiceRoleDefaultPolicy",
                "Roles": [
                    {
                        "Ref": "premiumSubscriptionServiceRole"
                    }
                ]
            }
        },
        "premiumSubscription": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "premiumSubscription.zip"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "premiumSubscriptionServiceRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 30,
                "Environment": {
                    "Variables": {
                        "REGION": {
                            "Ref": "resourcesRegion"
                        },
                        "DB_SUBSCRIPTION_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "subscriptionTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                },
                "VpcConfig": {
                    "SecurityGroupIds": [],
                    "SubnetIds": []
                },
                "Description": "Function to update premium subscription details in dynamodb table."
            },
            "DependsOn": [
                "premiumSubscriptionServiceRole",
                "premiumSubscriptionServiceRoleDefaultPolicy"
            ]
        },
        "createPaymentOrderServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            }
        },
        "createPaymentOrderServiceRoleDefaultPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "subscriptionTable",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "PolicyName": "createPaymentOrderServiceRoleDefaultPolicy",
                "Roles": [
                    {
                        "Ref": "createPaymentOrderServiceRole"
                    }
                ]
            }
        },
        "createPaymentOrder": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "createPaymentOrder.zip"
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "createPaymentOrderServiceRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs12.x",
                "Timeout": 30,
                "Environment": {
                    "Variables": {
                        "RAZORPAY_KEY_ID": "RAZORPAY_KEY_ID",
                        "RAZORPAY_KEY_SECRET": "RAZORPAY_KEY_SECRET"
                    }
                },
                "VpcConfig": {
                    "SecurityGroupIds": [],
                    "SubnetIds": []
                },
                "Description": "Function to create payment order for razorpay."
            },
            "DependsOn": [
                "createPaymentOrderServiceRole",
                "createPaymentOrderServiceRoleDefaultPolicy"
            ]
        },
        "HTTPAPI": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
                "CorsConfiguration": {
                    "AllowHeaders": [
                        "*"
                    ],
                    "AllowMethods": [
                        "*"
                    ],
                    "AllowOrigins": [
                        "*"
                    ],
                    "MaxAge": 3000
                },
                "Description": "Api for dynamic calls over HTTP/HTTPS to interact with lambda functions.",
                "Name": "vod-lambda-api-1",
                "ProtocolType": "HTTP"
            }
        },
        "APIDeploymentProdStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "AutoDeploy": true,
                "DeploymentId": {
                    "Ref": "APIDeployment"
                },
                "Description": "Production Stage",
                "StageName": "Prod"
            }
        },
        "uploadShortContentRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "RouteKey": "PUT /short-content/upload",
                "Target": {
                    "Fn::Join": [
                        "/",
                        [
                            "integrations",
                            {
                                "Ref": "onShortVideoUploadIntegration"
                            }
                        ]
                    ]
                }
            }
        },
        "uploadLongContentRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "RouteKey": "PUT /long-content/upload",
                "Target": {
                    "Fn::Join": [
                        "/",
                        [
                            "integrations",
                            {
                                "Ref": "onLongVideoUploadIntegration"
                            }
                        ]
                    ]
                }
            }
        },
        "getShortContentRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "RouteKey": "POST /short-content/get",
                "Target": {
                    "Fn::Join": [
                        "/",
                        [
                            "integrations",
                            {
                                "Ref": "getShortContentIntegration"
                            }
                        ]
                    ]
                }
            }
        },
        "getLongContentRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "RouteKey": "POST /long-content/get",
                "Target": {
                    "Fn::Join": [
                        "/",
                        [
                            "integrations",
                            {
                                "Ref": "getLongContentIntegration"
                            }
                        ]
                    ]
                }
            }
        },
        "getShortVideoInfoRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "RouteKey": "GET /short-content/{id}"
            }
        },
        "getLongVideoInfoRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "RouteKey": "GET /long-content/{id}"
            }
        },
        "likeShortContentRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "RouteKey": "POST /short-content/like",
                "Target": {
                    "Fn::Join": [
                        "/",
                        [
                            "integrations",
                            {
                                "Ref": "likeShortVideoIntegration"
                            }
                        ]
                    ]
                }
            }
        },
        "rateLongContentRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "RouteKey": "POST /long-content/rating",
                "Target": {
                    "Fn::Join": [
                        "/",
                        [
                            "integrations",
                            {
                                "Ref": "rateLongVideoIntegration"
                            }
                        ]
                    ]
                }
            }
        },
        "dbQueryRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "RouteKey": "POST /query",
                "Target": {
                    "Fn::Join": [
                        "/",
                        [
                            "integrations",
                            {
                                "Ref": "queryDBIntegration"
                            }
                        ]
                    ]
                }
            }
        },
        "opensearchIndexingRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "RouteKey": "POST /opensearch",
                "Target": {
                    "Fn::Join": [
                        "/",
                        [
                            "integrations",
                            {
                                "Ref": "opensearchIndexingIntegration"
                            }
                        ]
                    ]
                }
            }
        },
        "opensearchFetchRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "RouteKey": "GET /opensearch",
                "Target": {
                    "Fn::Join": [
                        "/",
                        [
                            "integrations",
                            {
                                "Ref": "opensearchFetchIntegration"
                            }
                        ]
                    ]
                }
            }
        },
        "createPaymentOrderRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "RouteKey": "POST /premium/payment",
                "Target": {
                    "Fn::Join": [
                        "/",
                        [
                            "integrations",
                            {
                                "Ref": "createPaymentOrderIntegration"
                            }
                        ]
                    ]
                }
            }
        },
        "premiumSubscriptionRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "RouteKey": "POST /premium/confirm",
                "Target": {
                    "Fn::Join": [
                        "/",
                        [
                            "integrations",
                            {
                                "Ref": "premiumSubscriptionIntegration"
                            }
                        ]
                    ]
                }
            }
        },
        "APIDeployment": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "Properties": {
                "Description": "Production Deployment",
                "ApiId": {
                    "Ref": "HTTPAPI"
                }
            },
            "DependsOn": [
                "uploadShortContentRoute"
            ]
        },
        "onShortVideoUploadInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "onShortVideoUpload"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "onLongVideoUploadInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "onLongVideoUpload"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "getShortContentInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "getShortContent"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "getLongContentInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "getLongContent"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "likeShortVideoInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "likeShortVideo"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "rateLongVideoInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "rateLongVideo"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "queryDBInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "queryDBFunction"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "opensearchFetchInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "opensearchFetch"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "opensearchIndexingInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "opensearchIndexing"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "createPaymentOrderInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "createPaymentOrder"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "premiumSubscriptionInvokePermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "premiumSubscription"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com"
            }
        },
        "opensearchIndexingIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "Description": "Integrates opensearchIndexing with API",
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                                "Fn::GetAtt": [
                                    "opensearchIndexing",
                                    "Arn"
                                ]
                            },
                            "/invocations"
                        ]
                    ]
                },
                "IntegrationMethod": "POST",
                "PayloadFormatVersion": "2.0"
            }
        },
        "opensearchFetchIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "Description": "Integrates opensearchFetch with API",
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                                "Fn::GetAtt": [
                                    "opensearchFetch",
                                    "Arn"
                                ]
                            },
                            "/invocations"
                        ]
                    ]
                },
                "IntegrationMethod": "POST",
                "PayloadFormatVersion": "2.0"
            }
        },
        "onShortVideoUploadIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "Description": "Integrates onShortVideoUploadFunction with API",
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                                "Fn::GetAtt": [
                                    "onShortVideoUpload",
                                    "Arn"
                                ]
                            },
                            "/invocations"
                        ]
                    ]
                },
                "IntegrationMethod": "POST",
                "PayloadFormatVersion": "2.0"
            }
        },
        "onLongVideoUploadIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "Description": "Integrates onLongVideoUploadFunction with API",
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                                "Fn::GetAtt": [
                                    "onLongVideoUpload",
                                    "Arn"
                                ]
                            },
                            "/invocations"
                        ]
                    ]
                },
                "IntegrationMethod": "POST",
                "PayloadFormatVersion": "2.0"
            }
        },
        "getShortContentIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "Description": "Integrates getShortContent with API",
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                                "Fn::GetAtt": [
                                    "getShortContent",
                                    "Arn"
                                ]
                            },
                            "/invocations"
                        ]
                    ]
                },
                "IntegrationMethod": "POST",
                "PayloadFormatVersion": "2.0"
            }
        },
        "getLongContentIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "Description": "Integrates getLongContent with API",
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                                "Fn::GetAtt": [
                                    "getLongContent",
                                    "Arn"
                                ]
                            },
                            "/invocations"
                        ]
                    ]
                },
                "IntegrationMethod": "POST",
                "PayloadFormatVersion": "2.0"
            }
        },
        "likeShortVideoIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "Description": "Integrates likeShortVideo with API",
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                                "Fn::GetAtt": [
                                    "likeShortVideo",
                                    "Arn"
                                ]
                            },
                            "/invocations"
                        ]
                    ]
                },
                "IntegrationMethod": "POST",
                "PayloadFormatVersion": "2.0"
            }
        },
        "rateLongVideoIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "Description": "Integrates rateLongVideo with API",
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                                "Fn::GetAtt": [
                                    "rateLongVideo",
                                    "Arn"
                                ]
                            },
                            "/invocations"
                        ]
                    ]
                },
                "IntegrationMethod": "POST",
                "PayloadFormatVersion": "2.0"
            }
        },
        "queryDBIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "Description": "Integrates queryDB with API",
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                                "Fn::GetAtt": [
                                    "queryDBFunction",
                                    "Arn"
                                ]
                            },
                            "/invocations"
                        ]
                    ]
                },
                "IntegrationMethod": "POST",
                "PayloadFormatVersion": "2.0"
            }
        },
        "createPaymentOrderIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "Description": "Integrates createPaymentOrder with API",
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                                "Fn::GetAtt": [
                                    "createPaymentOrder",
                                    "Arn"
                                ]
                            },
                            "/invocations"
                        ]
                    ]
                },
                "IntegrationMethod": "POST",
                "PayloadFormatVersion": "2.0"
            }
        },
        "premiumSubscriptionIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
                "ApiId": {
                    "Ref": "HTTPAPI"
                },
                "Description": "Integrates premiumSubscription with API",
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:",
                            {
                                "Ref": "AWS::Partition"
                            },
                            ":apigateway:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":lambda:path/2015-03-31/functions/",
                            {
                                "Fn::GetAtt": [
                                    "premiumSubscription",
                                    "Arn"
                                ]
                            },
                            "/invocations"
                        ]
                    ]
                },
                "IntegrationMethod": "POST",
                "PayloadFormatVersion": "2.0"
            }
        },
        "Logs6819BB44": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "LogDeliveryWrite",
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            },
            "UpdateReplacePolicy": "Retain",
            "DeletionPolicy": "Retain",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W35",
                            "reason": "Logs bucket does not require logging configuration"
                        },
                        {
                            "id": "W51",
                            "reason": "Logs bucket is private and does not require a bucket policy"
                        }
                    ]
                }
            }
        },
        "Source71E471F1": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                },
                "CorsConfiguration": {
                    "CorsRules": [
                        {
                            "AllowedHeaders": [
                                "*"
                            ],
                            "AllowedMethods": [
                                "HEAD",
                                "GET",
                                "PUT",
                                "POST"
                            ],
                            "AllowedOrigins": [
                                "*"
                            ],
                            "ExposedHeaders": [
                                "x-amz-server-side-encryption",
                                "x-amz-request-id",
                                "x-amz-id-2",
                                "ETag"
                            ],
                            "MaxAge": 3000
                        }
                    ]
                },
                "LoggingConfiguration": {
                    "DestinationBucketName": {
                        "Ref": "Logs6819BB44"
                    },
                    "LogFilePrefix": "source-bucket-logs/"
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            },
            "UpdateReplacePolicy": "Retain",
            "DeletionPolicy": "Retain",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W51",
                            "reason": "source bucket is private and does not require a bucket policy"
                        }
                    ]
                }
            }
        },
        "Destination920A3C57": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                },
                "CorsConfiguration": {
                    "CorsRules": [
                        {
                            "AllowedHeaders": [
                                "*"
                            ],
                            "AllowedMethods": [
                                "GET"
                            ],
                            "AllowedOrigins": [
                                "*"
                            ],
                            "MaxAge": 3000
                        }
                    ]
                },
                "LoggingConfiguration": {
                    "DestinationBucketName": {
                        "Ref": "Logs6819BB44"
                    },
                    "LogFilePrefix": "destination-bucket-logs/"
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                }
            },
            "UpdateReplacePolicy": "Retain",
            "DeletionPolicy": "Retain",
            "Metadata": {
                "aws:cdk:path": "VodFoundation/Destination/Resource"
            }
        },
        "DestinationPolicy7982387E": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "Destination920A3C57"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "s3:GetObject",
                            "Effect": "Allow",
                            "Principal": {
                                "CanonicalUser": {
                                    "Fn::GetAtt": [
                                        "CloudFrontCloudFrontDistributionOrigin1S3Origin17B88F1A",
                                        "S3CanonicalUserId"
                                    ]
                                }
                            },
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::GetAtt": [
                                                "Destination920A3C57",
                                                "Arn"
                                            ]
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "F16",
                            "reason": "Public website bucket policy requires a wildcard principal"
                        }
                    ]
                }
            }
        },
        "CloudFrontCloudfrontLoggingBucketE23C521E": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "LogDeliveryWrite",
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                },
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": true,
                    "BlockPublicPolicy": true,
                    "IgnorePublicAcls": true,
                    "RestrictPublicBuckets": true
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                }
            },
            "UpdateReplacePolicy": "Retain",
            "DeletionPolicy": "Retain",
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W35",
                            "reason": "This S3 bucket is used as the access logging bucket for CloudFront Distribution"
                        }
                    ]
                }
            }
        },
        "CloudFrontCloudfrontLoggingBucketPolicyD60AA01A": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "CloudFrontCloudfrontLoggingBucketE23C521E"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "*",
                            "Condition": {
                                "Bool": {
                                    "aws:SecureTransport": "false"
                                }
                            },
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::GetAtt": [
                                                "CloudFrontCloudfrontLoggingBucketE23C521E",
                                                "Arn"
                                            ]
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Sid": "HttpsOnly"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/CloudFront/CloudfrontLoggingBucket/Policy/Resource"
            }
        },
        "CloudFrontCloudFrontDistributionOrigin1S3Origin17B88F1A": {
            "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
            "Properties": {
                "CloudFrontOriginAccessIdentityConfig": {
                    "Comment": "Identity for VodFoundationCloudFrontCloudFrontDistributionOrigin1F191A578"
                }
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/CloudFront/CloudFrontDistribution/Origin1/S3Origin/Resource"
            }
        },
        "CloudFrontCloudFrontDistribution824F3346": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
                "DistributionConfig": {
                    "Comment": {
                        "Fn::Join": [
                            "",
                            [
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " Video on Demand Foundation"
                            ]
                        ]
                    },
                    "DefaultCacheBehavior": {
                        "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
                        "Compress": true,
                        "TargetOriginId": "VodFoundationCloudFrontCloudFrontDistributionOrigin1F191A578",
                        "ViewerProtocolPolicy": "allow-all",
                        "OriginRequestPolicyId": "88a5eaf4-2fd4-4709-b370-b4c650ea3fcf"
                    },
                    "DefaultRootObject": "index.html",
                    "Enabled": true,
                    "HttpVersion": "http2",
                    "IPV6Enabled": true,
                    "Logging": {
                        "Bucket": {
                            "Fn::GetAtt": [
                                "CloudFrontCloudfrontLoggingBucketE23C521E",
                                "RegionalDomainName"
                            ]
                        }
                    },
                    "Origins": [
                        {
                            "DomainName": {
                                "Fn::GetAtt": [
                                    "Destination920A3C57",
                                    "RegionalDomainName"
                                ]
                            },
                            "Id": "VodFoundationCloudFrontCloudFrontDistributionOrigin1F191A578",
                            "S3OriginConfig": {
                                "OriginAccessIdentity": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "origin-access-identity/cloudfront/",
                                            {
                                                "Ref": "CloudFrontCloudFrontDistributionOrigin1S3Origin17B88F1A"
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    ]
                }
            },
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W70",
                            "reason": "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion"
                        }
                    ]
                }
            }
        },
        "MediaConvertRole031A64A9": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "mediaconvert.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/MediaConvertRole/Resource"
            }
        },
        "MediaconvertPolicy9E3026EC": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:GetObject",
                                "s3:PutObject"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "Source71E471F1",
                                                    "Arn"
                                                ]
                                            },
                                            "/*"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "Destination920A3C57",
                                                    "Arn"
                                                ]
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Action": "execute-api:Invoke",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":execute-api:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":*"
                                    ]
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "MediaconvertPolicy9E3026EC",
                "Roles": [
                    {
                        "Ref": "MediaConvertRole031A64A9"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/MediaconvertPolicy/Resource"
            }
        },
        "CustomResourceServiceRoleE774390D": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/CustomResource/ServiceRole/Resource"
            }
        },
        "CustomResourceServiceRoleDefaultPolicy62213138": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "s3:PutObject",
                                "s3:PutBucketNotification"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "Source71E471F1",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "Source71E471F1",
                                                    "Arn"
                                                ]
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Action": "mediaconvert:DescribeEndpoints",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:mediaconvert:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":*"
                                    ]
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "CustomResourceServiceRoleDefaultPolicy62213138",
                "Roles": [
                    {
                        "Ref": "CustomResourceServiceRoleE774390D"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/CustomResource/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "CustomResource8CDCD7A7": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "customResource.zip"
                },
                "Role": {
                    "Fn::GetAtt": [
                        "CustomResourceServiceRoleE774390D",
                        "Arn"
                    ]
                },
                "Description": "CFN Custom resource to copy assets to S3 and get the MediaConvert endpoint",
                "Environment": {
                    "Variables": {
                        "SOLUTION_IDENTIFIER": "AwsSolution/SO0146/v1.1.0"
                    }
                },
                "Handler": "index.handler",
                "Runtime": "nodejs12.x",
                "Timeout": 30
            },
            "DependsOn": [
                "CustomResourceServiceRoleDefaultPolicy62213138",
                "CustomResourceServiceRoleE774390D"
            ],
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W58",
                            "reason": "Invalid warning: function has access to cloudwatch"
                        },
                        {
                            "id": "W89",
                            "reason": "AWS Lambda does not require VPC for this solution."
                        },
                        {
                            "id": "W92",
                            "reason": "ReservedConcurrentExecutions not required"
                        }
                    ]
                }
            }
        },
        "Endpoint": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CustomResource8CDCD7A7",
                        "Arn"
                    ]
                }
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "VodFoundation/Endpoint/Default"
            }
        },
        "jobSubmitServiceRole829286B1": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/jobSubmit/ServiceRole/Resource"
            }
        },
        "jobSubmitServiceRoleDefaultPolicyEC39C00E": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "iam:PassRole",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "MediaConvertRole031A64A9",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Action": "mediaconvert:CreateJob",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":mediaconvert:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":*"
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": "s3:GetObject",
                            "Effect": "Allow",
                            "Resource": [
                                {
                                    "Fn::GetAtt": [
                                        "Source71E471F1",
                                        "Arn"
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            {
                                                "Fn::GetAtt": [
                                                    "Source71E471F1",
                                                    "Arn"
                                                ]
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "jobSubmitServiceRoleDefaultPolicyEC39C00E",
                "Roles": [
                    {
                        "Ref": "jobSubmitServiceRole829286B1"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/jobSubmit/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "jobSubmitB391E42F": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "jobSubmit.zip"
                },
                "Role": {
                    "Fn::GetAtt": [
                        "jobSubmitServiceRole829286B1",
                        "Arn"
                    ]
                },
                "Description": "Submits an Encoding job to MediaConvert",
                "Environment": {
                    "Variables": {
                        "MEDIACONVERT_ENDPOINT": {
                            "Fn::GetAtt": [
                                "Endpoint",
                                "Endpoint"
                            ]
                        },
                        "MEDIACONVERT_ROLE": {
                            "Fn::GetAtt": [
                                "MediaConvertRole031A64A9",
                                "Arn"
                            ]
                        },
                        "JOB_SETTINGS": "assets01/job-settings.json",
                        "DESTINATION_BUCKET": {
                            "Ref": "Destination920A3C57"
                        },
                        "SOLUTION_ID": "SO0146",
                        "STACKNAME": {
                            "Ref": "AWS::StackName"
                        },
                        "SOLUTION_IDENTIFIER": "AwsSolution/SO0146/v1.1.0"
                    }
                },
                "Handler": "index.handler",
                "Runtime": "nodejs12.x",
                "Timeout": 30
            },
            "DependsOn": [
                "jobSubmitServiceRoleDefaultPolicyEC39C00E",
                "jobSubmitServiceRole829286B1"
            ],
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W58",
                            "reason": "Invalid warning: function has access to cloudwatch"
                        },
                        {
                            "id": "W89",
                            "reason": "AWS Lambda does not require VPC for this solution."
                        },
                        {
                            "id": "W92",
                            "reason": "ReservedConcurrentExecutions not required"
                        }
                    ]
                }
            }
        },
        "jobSubmitEventInvokeConfig0385F502": {
            "Type": "AWS::Lambda::EventInvokeConfig",
            "Properties": {
                "FunctionName": {
                    "Ref": "jobSubmitB391E42F"
                },
                "Qualifier": "$LATEST",
                "MaximumRetryAttempts": 0
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/jobSubmit/EventInvokeConfig/Resource"
            }
        },
        "jobSubmitS3Trigger3DEB8D7C": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "jobSubmitB391E42F",
                        "Arn"
                    ]
                },
                "Principal": "s3.amazonaws.com",
                "SourceAccount": {
                    "Ref": "AWS::AccountId"
                }
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/jobSubmit/S3Trigger"
            }
        },
        "JobCompleteServiceRole2855C268": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                            ]
                        ]
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/JobComplete/ServiceRole/Resource"
            }
        },
        "JobCompleteServiceRoleDefaultPolicy686BE0F5": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": "mediaconvert:GetJob",
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:",
                                        {
                                            "Ref": "AWS::Partition"
                                        },
                                        ":mediaconvert:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":*"
                                    ]
                                ]
                            }
                        },
                        {
                            "Action": [
                                "s3:GetObject",
                                "s3:PutObject"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        {
                                            "Fn::GetAtt": [
                                                "Source71E471F1",
                                                "Arn"
                                            ]
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "shortVideosTable",
                                    "Arn"
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:BatchGetItem",
                                "dynamodb:BatchWriteItem",
                                "dynamodb:PutItem",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:Scan",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "longVideosTable",
                                    "Arn"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "PolicyName": "JobCompleteServiceRoleDefaultPolicy686BE0F5",
                "Roles": [
                    {
                        "Ref": "JobCompleteServiceRole2855C268"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/JobComplete/ServiceRole/DefaultPolicy/Resource"
            }
        },
        "JobComplete703682D0": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "lambdaFunctionsS3Bucket"
                    },
                    "S3Key": "jobComplete.zip"
                },
                "Role": {
                    "Fn::GetAtt": [
                        "JobCompleteServiceRole2855C268",
                        "Arn"
                    ]
                },
                "Description": "Triggered by Cloudwatch Events,processes completed MediaConvert jobs.",
                "Environment": {
                    "Variables": {
                        "DB_SHORT_VIDEOS_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "shortVideosTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "DB_LONG_VIDEOS_TABLE_NAME": {
                            "Fn::Select": [
                                "1",
                                {
                                    "Fn::Split": [
                                        "/",
                                        {
                                            "Fn::GetAtt": [
                                                "longVideosTable",
                                                "Arn"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        },
                        "MEDIACONVERT_ENDPOINT": {
                            "Fn::GetAtt": [
                                "Endpoint",
                                "Endpoint"
                            ]
                        },
                        "CLOUDFRONT_DOMAIN": {
                            "Fn::GetAtt": [
                                "CloudFrontCloudFrontDistribution824F3346",
                                "DomainName"
                            ]
                        },
                        "SOURCE_BUCKET": {
                            "Ref": "Source71E471F1"
                        },
                        "JOB_MANIFEST": "jobs-manifest.json",
                        "STACKNAME": {
                            "Ref": "AWS::StackName"
                        },
                        "METRICS": {
                            "Fn::FindInMap": [
                                "Send",
                                "AnonymousUsage",
                                "Data"
                            ]
                        },
                        "SOLUTION_ID": "SO0146",
                        "VERSION": "1.1.0",
                        "UUID": {
                            "Fn::GetAtt": [
                                "Endpoint",
                                "UUID"
                            ]
                        },
                        "SOLUTION_IDENTIFIER": "AwsSolution/SO0146/v1.1.0"
                    }
                },
                "Handler": "index.handler",
                "Runtime": "nodejs12.x",
                "Timeout": 30
            },
            "DependsOn": [
                "JobCompleteServiceRoleDefaultPolicy686BE0F5",
                "JobCompleteServiceRole2855C268"
            ],
            "Metadata": {
                "cfn_nag": {
                    "rules_to_suppress": [
                        {
                            "id": "W58",
                            "reason": "Invalid warning: function has access to cloudwatch"
                        },
                        {
                            "id": "W89",
                            "reason": "AWS Lambda does not require VPC for this solution."
                        },
                        {
                            "id": "W92",
                            "reason": "ReservedConcurrentExecutions not required"
                        }
                    ]
                }
            }
        },
        "JobCompleteEventInvokeConfig692D89BE": {
            "Type": "AWS::Lambda::EventInvokeConfig",
            "Properties": {
                "FunctionName": {
                    "Ref": "JobComplete703682D0"
                },
                "Qualifier": "$LATEST",
                "MaximumRetryAttempts": 0
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/JobComplete/EventInvokeConfig/Resource"
            }
        },
        "JobCompleteAwsEventsLambdaInvokePermission1ED79B615": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "JobComplete703682D0",
                        "Arn"
                    ]
                },
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "EventTriggerEventsRule76A88FDF",
                        "Arn"
                    ]
                }
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/JobComplete/AwsEventsLambdaInvokePermission-1"
            }
        },
        "S3Config": {
            "Type": "AWS::CloudFormation::CustomResource",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CustomResource8CDCD7A7",
                        "Arn"
                    ]
                },
                "SourceBucket": {
                    "Ref": "Source71E471F1"
                },
                "LambdaArn": {
                    "Fn::GetAtt": [
                        "jobSubmitB391E42F",
                        "Arn"
                    ]
                }
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete",
            "Metadata": {
                "aws:cdk:path": "VodFoundation/S3Config/Default"
            }
        },
        "EventTriggerEventsRule76A88FDF": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "EventPattern": {
                    "source": [
                        "aws.mediaconvert"
                    ],
                    "detail": {
                        "userMetadata": {
                            "StackName": [
                                {
                                    "Ref": "AWS::StackName"
                                }
                            ]
                        },
                        "status": [
                            "COMPLETE",
                            "ERROR",
                            "CANCELED",
                            "INPUT_INFORMATION"
                        ]
                    }
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "JobComplete703682D0",
                                "Arn"
                            ]
                        },
                        "Id": "Target0"
                    }
                ]
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/EventTrigger/EventsRule/Resource"
            }
        },
        "CDKMetadata": {
            "Type": "AWS::CDK::Metadata",
            "Properties": {
                "Analytics": "v2:deflate64:H4sIAAAAAAAAA3VSwW7CMAz9Fu5poKu084ANCWkTCPiBkBoU2iZVnDBNVf99TlJoD9ultl/sl+eX5jzPF3wxexPfmHWyrOadNBZ4d3RCVmx90V+ibZW+hnQvrGjAgWVro9FZLx1bIoKj5mvs8ehMcwA03koII898Cu68a70LGfGUyimjexYFYMG7lZcVxNMhS2FvaiV/RnioU7ESCD2TtfHlxRrtePeuSKA6+0DOdlaRvqWUgLgtQTvlItM6DGzCwH8dU5qeKdHw7mDqtFqIo6qU9awWzbkUvNt4LePldPbMP+5EvdV3UwGtflHR1j/BPdhGIcZrschEsBl5dJtBGEBS4gclFKlLE3QyrZIBS0n8jhqn5dGfUVrVPjRO674nOlPHrTGTj8fGefpLnjZn9F6jhydzLAZtmSVJ2WBF3A+DyJP5jNBgUhYkJ4RmNdKt2pTAbzi/5y88f+X57IZKERs9SAP8kOIvI5symLUCAAA="
            },
            "Metadata": {
                "aws:cdk:path": "VodFoundation/CDKMetadata/Default"
            },
            "Condition": "CDKMetadataAvailable"
        },
        "OpenSearchDomain": {
            "Type": "AWS::OpenSearchService::Domain",
            "Properties": {
                "DomainName": "msp-search",
                "EngineVersion": "OpenSearch_1.2",
                "ClusterConfig": {
                    "InstanceCount": "1",
                    "InstanceType": "t3.small.search"
                },
                "EBSOptions": {
                    "EBSEnabled": true,
                    "VolumeSize": "20",
                    "VolumeType": "gp2"
                },
                "AccessPolicies": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "es:*",
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": [
                                        "opensearchIndexingServiceRole",
                                        "Arn"
                                    ]
                                }
                            },
                            "Resource": {
                                "Fn::Sub": "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/msp-search/*"
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": "es:*",
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": [
                                        "opensearchFetchServiceRole",
                                        "Arn"
                                    ]
                                }
                            },
                            "Resource": {
                                "Fn::Sub": "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/msp-search/*"
                            }
                        }
                    ]
                },
                "AdvancedOptions": {
                    "rest.action.multi.allow_explicit_index": true
                },
                "NodeToNodeEncryptionOptions": {
                    "Enabled": true
                },
                "EncryptionAtRestOptions": {
                    "Enabled": true,
                    "KmsKeyId": {
                        "Fn::GetAtt": [
                            "KMSkeyforOpenSearch",
                            "Arn"
                        ]
                    }
                }
            },
            "DependsOn": "KMSkeyforOpenSearch"
        },
        "KMSkeyforOpenSearch": {
            "Type": "AWS::KMS::Key",
            "Properties": {
                "Description": "KMS Key for opensearch",
                "Enabled": true,
                "KeyPolicy": {
                    "Version": "2012-10-17",
                    "Id": "key-default-1",
                    "Statement": [
                        {
                            "Sid": "Allow access through OpenSearch Service for all principals in the account that are authorized to use OpenSearch Service",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:iam::",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":root"
                                        ]
                                    ]
                                }
                            },
                            "Action": [
                                "kms:Encrypt",
                                "kms:Decrypt",
                                "kms:ReEncrypt*",
                                "kms:GenerateDataKey*",
                                "kms:CreateGrant",
                                "kms:DescribeKey",
                                "kms:CreateKey",
                                "kms:PutKeyPolicy",
                                "kms:ScheduleKeyDeletion"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Sid": "Allow direct access to key metadata to the account",
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:iam::",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":root"
                                        ]
                                    ]
                                }
                            },
                            "Action": [
                                "kms:Describe*",
                                "kms:Get*",
                                "kms:List*",
                                "kms:RevokeGrant"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Sid": "Allow OpenSearch service principals to describe the key directly",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "es.amazonaws.com"
                            },
                            "Action": [
                                "kms:Describe*",
                                "kms:Get*",
                                "kms:List*"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "KeySpec": "SYMMETRIC_DEFAULT",
                "KeyUsage": "ENCRYPT_DECRYPT",
                "MultiRegion": false
            }
        }
    },
    "Outputs": {
        "UsersTable": {
            "Description": "DynamoDB Table to store users information.",
            "Value": {
                "Fn::Select": [
                    "1",
                    {
                        "Fn::Split": [
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "usersTable",
                                    "Arn"
                                ]
                            }
                        ]
                    }
                ]
            }
        },
        "ShortVideosTable": {
            "Description": "DynamoDB Table to store short videos information.",
            "Value": {
                "Fn::Select": [
                    "1",
                    {
                        "Fn::Split": [
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "shortVideosTable",
                                    "Arn"
                                ]
                            }
                        ]
                    }
                ]
            }
        },
        "LongVideosTable": {
            "Description": "DynamoDB Table to store long videos information.",
            "Value": {
                "Fn::Select": [
                    "1",
                    {
                        "Fn::Split": [
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "longVideosTable",
                                    "Arn"
                                ]
                            }
                        ]
                    }
                ]
            }
        },
        "ShortVideoLikesTable": {
            "Description": "DynamoDB Table to store likes on short videos.",
            "Value": {
                "Fn::Select": [
                    "1",
                    {
                        "Fn::Split": [
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "shortVideoLikesTable",
                                    "Arn"
                                ]
                            }
                        ]
                    }
                ]
            }
        },
        "GenrewiseVideosTable": {
            "Description": "DynamoDB Table to store long videos information genrewise.",
            "Value": {
                "Fn::Select": [
                    "1",
                    {
                        "Fn::Split": [
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "genrewiseVideosTable",
                                    "Arn"
                                ]
                            }
                        ]
                    }
                ]
            }
        },
        "LanguagewiseVideosTable": {
            "Description": "DynamoDB Table to store long videos information languagewise.",
            "Value": {
                "Fn::Select": [
                    "1",
                    {
                        "Fn::Split": [
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "languagewiseVideosTable",
                                    "Arn"
                                ]
                            }
                        ]
                    }
                ]
            }
        },
        "LongVideosRatingsTable": {
            "Description": "DynamoDB Table to store long videos rating information.",
            "Value": {
                "Fn::Select": [
                    "1",
                    {
                        "Fn::Split": [
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "longVideosRatingsTable",
                                    "Arn"
                                ]
                            }
                        ]
                    }
                ]
            }
        },
        "SubscriptionTable": {
            "Description": "DynamoDB Table to store premium content subscription details.",
            "Value": {
                "Fn::Select": [
                    "1",
                    {
                        "Fn::Split": [
                            "/",
                            {
                                "Fn::GetAtt": [
                                    "subscriptionTable",
                                    "Arn"
                                ]
                            }
                        ]
                    }
                ]
            }
        },
        "APIEndpoint": {
            "Description": "Api for dynamic calls over HTTP/HTTPS to interact with lambda functions.",
            "Value": {
                "Fn::GetAtt": [
                    "HTTPAPI",
                    "ApiEndpoint"
                ]
            }
        },
        "SourceBucket": {
            "Description": "Source S3 Bucket used to host source video and MediaConvert job settings files",
            "Value": {
                "Ref": "Source71E471F1"
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-SourceBucket"
                        ]
                    ]
                }
            }
        },
        "DestinationBucket": {
            "Description": "Source S3 Bucket used to host all MediaConvert ouputs",
            "Value": {
                "Ref": "Destination920A3C57"
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-DestinationBucket"
                        ]
                    ]
                }
            }
        },
        "CloudFrontDomain": {
            "Description": "CloudFront Domain Name",
            "Value": {
                "Fn::GetAtt": [
                    "CloudFrontCloudFrontDistribution824F3346",
                    "DomainName"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "-CloudFrontDomain"
                        ]
                    ]
                }
            }
        }
    },
    "Conditions": {
        "CDKMetadataAvailable": {
            "Fn::Or": [
                {
                    "Fn::Or": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "af-south-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ap-east-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ap-northeast-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ap-northeast-2"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ap-south-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ap-southeast-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ap-southeast-2"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "ca-central-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "cn-north-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "cn-northwest-1"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Or": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "eu-central-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "eu-north-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "eu-south-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "eu-west-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "eu-west-2"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "eu-west-3"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "me-south-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "sa-east-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "us-east-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "us-east-2"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Or": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "us-west-1"
                            ]
                        },
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "AWS::Region"
                                },
                                "us-west-2"
                            ]
                        }
                    ]
                }
            ]
        }
    }
}